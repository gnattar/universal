
function[w_thetaenv]...
    =  wdatasummary_devepoch(sessionInfo,obj,block_tags,block_trialnums,avg_trials,gopix,nogopix,restrictTime,pd,plot_whiskerfits,str,timewindowtag,min_meanbarpos,baseline_barpos)
%% new version : compare within block & with top 90% percentile of setpoint values
% w_setpoint_trials % all setpoint values from all trials  entire length
% w_setpoint_early % within the restricted time window from early trials
% w_setpoint_late % within the restricted time window from late trials
% w_setpoint_trials_med % mean of 90th percentile of setpoint values within window
% w_setpoint_trials_width std of the points avgd over

w_thetaenv = struct('thetaenvtrials',[],'time',[],'dist',[],'bins',[],'amp',[],'mean_thetaenv',[],'mean_thetaenv_binned',[],'mean_whiskamp',[],'mean_whiskamp_binned',[], 'total_whiskamp',[],'total_whiskamp_binned',[],'peak_thetaenv',[],'peak_thetaenv_binned',[],...
                    'prepole_thetaenv',[],'prepole_thetaenv_binned',[],'prcoccupancy',[],'prcoccupancy_binned',[],'pval',[],'mean_barpos',[]);
numblocks = size(block_tags,2);

%% get mean bar theta cut off

y  =sessionInfo.go_bartheta;
x = sessionInfo.gopos;
ind = find(~isnan(y));
y = y(ind);
x = x(ind);

y = sort(y ,'ascend');

p=polyfit(x,y,1);
%      mean_selecttrials = nanmedian(sessionInfo.goPosition_runmean(block_trialnums{1}));
mean_selecttrials = min_meanbarpos;
biased_bartheta = round(polyval(p,mean_selecttrials*10000)*100)/100;
shoulder = 2.5; % avg 5 deg between pole positions , should = 2.5 deg
baseline_bartheta =  round(polyval(p,baseline_barpos*10000)*100)/100;
mean_bartheta =  round(polyval(p,sessionInfo.goPosition_mean*10000)*100)/100;

point = max(gopix);
gopix(:,2) = point(1,2);
nogopix(1,2) = point(1,2);


frames_list=arrayfun(@(x) size(x{:}.time{1},2), obj,'uniformoutput',false);
maxframes = max(cell2mat(frames_list));
numpoleframes = (restrictTime(2)-restrictTime(1))*500;

if~(exist([pd '/plots/'],'dir'))
    mkdir (pd,'plots') ;
end

fpath = [pd '/plots/'];
if ~(exist([fpath timewindowtag],'dir'))
    mkdir (fpath,timewindowtag) ;
end

fpath = [pd '/plots/' timewindowtag '/'];
if ~(exist([fpath str],'dir'))
    mkdir (fpath,str) ;
end

fpath = [pd '/plots/' timewindowtag '/' str];

%     fnam=[str 'thetaEnv.jpg'];
%     h1=figure('Name','Set point plot');
%     set(0,'CurrentFigure',h1);
%     suptitle(['M:' obj{1}.mouseName ' S:' obj{1}.sessionName ' B: ' str ]);


for(blk=1:numblocks)
    trialnums = block_trialnums{blk};
    col=jet(length(trialnums));
    thetaenv_bins = -50:2.5:50;
    occupancy_bins =  biased_bartheta-40:20:biased_bartheta+40;
    occupancy_nbins = length(occupancy_bins );
    nbins=length(thetaenv_bins);
    thetaenv_dist = nan(length(trialnums),nbins);
    thetaenv_occupancy = nan(length(trialnums), occupancy_nbins);
    thetaenv_trials = nan(length(trialnums)+1,numpoleframes);
    amp_trials= nan(length(trialnums)+1,numpoleframes);
    local.mean_thetaenv = nan(length(trialnums),2);
    local.peak_thetaenv = nan(length(trialnums),2);
    local.prcoccupancy = nan(length(trialnums),1);
    local.total_whiskamp = nan(length(trialnums),1);
    local.mean_whiskamp = nan(length(trialnums),1);
    local.prepole_thetaenv = nan(length(trialnums),2);
    ref_time = restrictTime(1)+.002:.002:restrictTime(2);ref_time=round(ref_time.*1000)./1000;
    thetaenv_time =   ref_time;
    numpoleframes = length(ref_time);
    
    %        count =1;
    
    for(i=1:1:length(trialnums))
        
        t = trialnums(i);
        frames = length(obj{t}.theta{1,1});
        if(frames<1500)
            disp(['delete trial' obj{t}.trackerFileName num2str(trialnums(i))])
            frameTime = obj{t}.framePeriodInSec;
        else
            frameTime = obj{t}.framePeriodInSec;            
            setpoint = obj{t}.Setpoint{1,1};
            amp     = obj{t}.Amplitude{1,1};
            theta = obj{t}.theta{1,1};
            thetaenv = envelope(theta,'linear');
            xt = obj{t}.time{1,1};xt = round( xt.*1000)./1000;           
            poleinds =  find((restrictTime(1)< xt) & (xt<=restrictTime(2)));
            poleinds_explore = find(amp(poleinds)>0); 
            prepoleinds = find( (xt>restrictTime(1)-.2) & (xt<=restrictTime(1)));
            
            prepoleinds_explore = find(amp(prepoleinds)>0); 
            
            if(isempty(poleinds))
               trialnums(i);
               obj{i}.trackerFileName
            end
            thetaenv_pole = thetaenv(poleinds);
            xt_pole = xt(poleinds);          
            [lia,matchedinds]= ismember( xt_pole,ref_time);
            thetaenv_trials(i,matchedinds>0) =   thetaenv_pole;
            thetaenv_amp(i,matchedinds>0) = amp(poleinds);
            thetaenv_explore = thetaenv(poleinds_explore);
            thetaenv_occupancy(i,:) = histnorm(thetaenv_explore,occupancy_bins);
                
            thetaenv_dist(i,:) = histnorm(thetaenv_explore,thetaenv_bins);%./length(thetaenv_pole);
            past_meanbar= find(thetaenv_bins > biased_bartheta - shoulder);
            local.mean_thetaenv(i,1) = mean(thetaenv_explore);
            local.mean_thetaenv(i,2) =  std(thetaenv_explore);
            
            prc = prctile(thetaenv_explore,90);
            temp = thetaenv_explore(thetaenv_explore>prc);
            local.peak_thetaenv(i,1) = mean(temp); %% 
            local.peak_thetaenv(i,2) = std(temp);
            
            temp = thetaenv(prepoleinds_explore);
            local.prepole_thetaenv(i,1) = mean(temp);
            local.prepole_thetaenv(i,2) = std(temp);
            
            local.prcoccupancy(i,1) = sum(thetaenv_dist(i,past_meanbar));
            
            local.mean_whiskamp(i,1) = mean(amp(poleinds_explore));
            local.total_whiskamp(i,1) = sum(amp(poleinds_explore));


        end
    end
    
    hold off;
    avg_trials = floor(length(trialnums)/3);
    if(i-1<=avg_trials)
        avg_trials = i-2;
        disp ([ 'there are only' num2str(i-1) ' good trials , reduced trialstoavg to ' num2str(i-2)]);
    end
    
    earlyinds= [1:avg_trials] ;
    lateinds= [i-1-avg_trials : i-1] ;
    
    %% plot thetaenv _med,meanbarcross,prepole
     
    var_set = {'mean_thetaenv','peak_thetaenv','prepole_thetaenv','prcoccupancy','mean_whiskamp','total_whiskamp'};
    col_set = {'k','b','g','k','k','b'};
    pval = zeros(length(var_set));
    for v = 1: length(var_set)
        strg = var_set{v};
        
        fnam=[str strg '.eps'];
        h1a=figure('Name',[strg ' plot']);
        set(0,'CurrentFigure',h1a);
        suptitle(['M:' obj{1}.mouseName ' S:' obj{1}.sessionName ' B: ' str strg]);
        
% %         up = thetaenv_mean(:,1) + thetaenv_mean(:,2);
% %         low=thetaenv_mean(:,1)-thetaenv_mean(:,2);
% %         up(isnan(up)) = 0;
% %         low(isnan(low)) = 0;
        windowSize=10;
        grid on;
        
        data =local.(strg);
        data1 = data(:,1);
        binned= arrayfun( @(x) nanmean(data1(x: min(x+windowSize-1,end) ),1), 1:windowSize:size(data1,1), 'UniformOutput', false);
        binned=cat(1,binned{:});
        
        if(size(data,2)>1)
            data2 = data(:,2);
            binned_2 = arrayfun( @(x) nanmean(data2(x: min(x+windowSize-1,end) ),1), 1:windowSize:size(data2,1), 'UniformOutput', false);
            binned_2=cat(1,binned_2{:});
        end
        xbins = arrayfun( @(x) nanmean(x:min(x+windowSize-1,size(data,1))), 1:windowSize:size(data,1), 'UniformOutput', false);
        xbins=floor(cat(1,xbins{:}));
        
        switch v
            case {4,5,6}
                plot(trialnums(xbins),binned,'linewidth',1,'color',col_set{v},'Marker','o','MarkerSize',8); hold on; 
                plot (trialnums,data1,'linewidth',.5,'color',[.5 .5 .5]);
            otherwise
                errorbar(trialnums(xbins),binned,binned_2,'linewidth',1.5,'color',col_set{v},'Marker','o','MarkerSize',8);hold on;
                plot (trialnums,data1,'linewidth',.5,'color',[.5 .5 .5]);
                grid on;
                hline(biased_bartheta,{'r-','linewidth',1.5},{['bb ' num2str(biased_bartheta)]},[0 .1]);
                hline(mean_bartheta,{'r--','linewidth',1},{['mb ' num2str(mean_bartheta)]},[.75 -.1]);
        end
                
        

        if(length(binned)>3)
            s = regstats(binned,trialnums(xbins),'linear','tstat');
            pval(v)  = s.tstat.pval(2); % test for non-zero slope of med           
        end
        w_thetaenv.(var_set{v}){blk} = {horzcat(trialnums,data(:,1))}; %% mean for restricted time window
        w_thetaenv.([var_set{v} '_binned']){blk} = {horzcat(trialnums(xbins),binned)}; %%median binned withi n restricted time window
 
        if(size(data,2)>1 )        
            w_thetaenv.(var_set{v}){blk} = {horzcat(trialnums,data(:,1),data(:,2))}; %% mean for restricted time window
            w_thetaenv.([var_set{v} '_binned']){blk} = {horzcat(trialnums(xbins),binned,binned_2)}; %%median binned withi n restricted time window
        end

%         saveas(gcf,[fpath,filesep,fnam],'jpg');
        print(h1a,'-depsc2','-painters','-loose',[fpath,filesep,fnam])
        close(h1a);   
        
    end
        w_thetaenv.amp{blk} = {thetaenv_amp};
        w_thetaenv.thetaenvtrials{blk} = {thetaenv_trials};
        w_thetaenv.time {blk}= {thetaenv_time};

        %% plot dist
        fnam=[str 'Dist' '.eps'];
        h1a=figure('Name',[strg ' plot']);
        set(0,'CurrentFigure',h1a);
        suptitle(['M:' obj{1}.mouseName ' S:' obj{1}.sessionName ' B: ' str 'Thetaenv Distribution']);
        %         subplot(numblocks*2,3,(blk-1)*2+3);
        subplot(numblocks*2,1,(blk-1)*2+(1));
        set(gcf,'DefaultAxesColorOrder',jet(size(thetaenv_dist,1)));
        plot(thetaenv_bins',thetaenv_dist','linewidth',0.25);hold on; grid on;
        vline(biased_bartheta,{'r-','linewidth',1.5});
        vline(mean_bartheta,{'r--','linewidth',0.5});
        axis ([-35 35 0 1]);grid on;
        %              text(.5,.02,'Thetaenv_dist ','VerticalAlignment','bottom','HorizontalAlignment','center');
        title('Thetaenv_dist ');
        subplot(numblocks*2,1,(blk-1)*2+(2));
        cummu_dist = histnorm(reshape(thetaenv_trials,prod(size(thetaenv_trials)),1),thetaenv_bins);
        plot(thetaenv_bins',cummu_dist','linewidth',1.5,'color',[.5 .5 .5]); hold on;
        vline(biased_bartheta,{'r', 'linewidth',1.5},{num2str(biased_bartheta)},[0 0]);grid on;
        vline(mean_bartheta,{'r--','linewidth',1},{num2str(mean_bartheta)},[.2 .5]);
%         vline([biased_bartheta-shoulder, biased_bartheta+shoulder],{'k--','linewidth',1});
        %             text(.5,.02,'Thetaenv_dist Cummulative ','VerticalAlignment','bottom','HorizontalAlignment','center');
        title('Thetaenv_dist Cummulative ');
        ylabel('Normalized Dist');xlabel('Trials');
        
%         saveas(gcf,[fpath,filesep,fnam],'eps');
        print(h1a,'-depsc2','-painters','-loose',[fpath,filesep,fnam])
        close(h1a);

        w_thetaenv.dist {blk}= {thetaenv_dist};
        w_thetaenv.bins {blk}= {thetaenv_bins};
        w_thetaenv.occupancy = {thetaenv_occupancy};
        w_thetaenv.occupancybins = {occupancy_bins};

        w_thetaenv.pval {blk}={pval};
        w_thetaenv.biased_barpos{blk} = {biased_bartheta};
        w_thetaenv.baseline_barpos{blk} = {baseline_bartheta};
        w_thetaenv.mean_barpos{blk} = {mean_bartheta};



        %%plot thetaenv first and last n trials
        fnam=[str 'Theta_env trials.eps'];
        h1c=figure('Name','Theta Envelope Trials');
        set(0,'CurrentFigure',h1c);
        suptitle(['M:' obj{1}.mouseName ' S:' obj{1}.sessionName ' B: ' str ' Trials Early - Late']);

        xt = thetaenv_time;
        %          subplot(numblocks*2,3,(blk-1)*2+4);
        subplot(numblocks*1,2,(blk-1)*2+1);
        plot(xt,thetaenv_trials(earlyinds(1:2:end),:),'color',[.5 .5 .5],'linewidth',1); hold on;
        hline(biased_bartheta,{'r','linewidth',1.5},{['bb ' num2str(biased_bartheta)]},[0 .1]);
        hline(mean_bartheta,{'r--','linewidth',1},{['mb ' num2str(mean_bartheta)]},[.75 -.1]);

        avg_thetaenv = nanmean(thetaenv_trials(earlyinds,:));plot(xt,avg_thetaenv,'linewidth',1.5,'color','k');hold off;
        axis([restrictTime(1),restrictTime(2),-30,30]);set(gca,'YGrid','on');
        set(gca,'YTick',-30:10:30);
        %          subplot(numblocks*2,3,(blk-1)*2+5);
        subplot(numblocks*1,2,(blk-1)*2+2);
        plot(xt,thetaenv_trials(lateinds(1:2:end),:),'color',[.5 .5 1],'linewidth',1); hold on;
        hline(biased_bartheta,{'r','linewidth',1.5},{['bb ' num2str(biased_bartheta)]},[0 .1]);
        hline(mean_bartheta,{'r--','linewidth',0.5},{['mb ' num2str(mean_bartheta)]},[.75 -.1]);%(mean_bartheta-biased_bartheta)/10]);
        hline([biased_bartheta-shoulder, biased_bartheta+shoulder],{'k--','linewidth',0.5});
        avg_thetaenv = nanmean(thetaenv_trials(lateinds,:),1); plot(xt,avg_thetaenv,'linewidth',1.5,'color','b'); grid on;   hold off;
        axis([restrictTime(1),restrictTime(2),-30,30]);set(gca,'YGrid','on');
        set(gca,'YTick',-30:10:30);
        freezeColors;

%         saveas(gcf,[fpath,filesep,fnam],'eps');
        print(h1c,'-depsc2','-painters','-loose',[fpath,filesep,fnam])
        close(h1c);
end

%plotting dist in 25 trial blocks
sc = get(0,'ScreenSize');
h1b = figure('position', [1000, sc(4)/10-100, sc(3)*3/10, sc(4)*3/4], 'color','w');
count =1;
for trl = 1:20: size(thetaenv_dist,1)
    endtrl  = count*20;
    strtrl = endtrl -19;
    if (trl +20 >  size(thetaenv_dist,1))
        endtrl  =size(thetaenv_dist,1);
    end
    subplot ( ceil(size(thetaenv_dist,1)/20 ), 1,count);
    set(gcf,'DefaultAxesColorOrder',copper(20));
    plot(thetaenv_bins(1,:),thetaenv_dist(strtrl:endtrl,:),'linewidth',1.5); grid on;hold on;
%     line([thetaenv_meanbarcross(strtrl:endtrl,1)'; thetaenv_meanbarcross(strtrl:endtrl,1)'], [ones(1,endtrl-strtrl+1)*.8; ones(1,endtrl-strtrl+1)*.95],'linewidth',1.5);
    vline(biased_bartheta,{'r', 'linewidth',1.5},{num2str(biased_bartheta)},[.05 .3],{'Rotation', 90, 'Interpreter', 'tex'});grid on;
    vline(mean_bartheta,{'r--','linewidth',1},{num2str(mean_bartheta)},[.05 .3],{'Rotation', 90, 'Interpreter', 'tex'});
%     vline([biased_bartheta-shoulder, biased_bartheta+shoulder],{'k--','linewidth',0.5});
    count = count +1;
    axis([-35 35 0 .5]);
end
fnam = [ str 'Thetaenv_Dist.eps'];
% saveas(gcf,[fpath,filesep,fnam],'eps');
print(h1b,'-depsc2','-painters','-loose',[fpath,filesep,fnam])
close(h1b);



sc = get(0,'ScreenSize');
h1b = figure('position', [1000, sc(4)/10-100, sc(3)*3/10, sc(4)*3/4], 'color','w');
imagesc(occupancy_bins,trialnums,thetaenv_occupancy); hold on;
vline(biased_bartheta,{'w', 'linewidth',1.5});
vline([biased_bartheta-shoulder, biased_bartheta+shoulder],{'w--','linewidth',0.5});
fnam = [ str 'Thetaenv_Occupancy.eps'];
saveas(gcf,[fpath,filesep,fnam],'jpg');
% print(h1b,'-depsc2','-painters','-loose',[fpath,filesep,fnam])
close(h1b);


%% plot kappa

fnam=[str 'fkappa.eps'];
h2=figure('Name','Kappa');
set(0,'CurrentFigure',h2);

for(blk=1:numblocks)
    trialnums = block_trialnums{blk};
    kappa_trials= zeros(length(trialnums),maxframes);    
    col=jet(length(trialnums));
    count =1;
    subplot(numblocks*2,2,(blk-1)*2+1);
    for(i=1:length(trialnums))
        t = trialnums(i);
        frames = length(obj{t}.kappa{1,1});
        if(frames<1500)
            disp(['delete trial' obj{t}.trackerFileName num2str(trialnums(i))]);
        else
            frameTime = obj{t}.framePeriodInSec;
            xt = obj{t}.time{1};
            temp=obj{t}.kappa{1,1};
            baselineinds = find(restrictTime(1)-.3< xt <restrictTime(1)-.1);
            baseline = mean(temp(baselineinds)); %mean(temp(round(0.3/frameTime):round(0.5/frameTime)));
            temp=temp-baseline;
            windowSize = 1;
            filtkappa= filter(ones(1,windowSize)/windowSize,1,temp);
            %             plot(xt(round(.3/frameTime):round(4/frameTime)),filtkappa(round(.3/frameTime):round(4/frameTime)),'color',col(i,:),'linewidth',1); axis ([.3 4 -.01 0.01]) ;
            plot(xt(round(restrictTime(1)/frameTime):round(restrictTime(2)/frameTime)),filtkappa(round(restrictTime(1)/frameTime):round(restrictTime(2)/frameTime)),'color',col(i,:),'linewidth',1.5); axis ([restrictTime(1) restrictTime(2) -.01 0.01]) ;
            hold on;
            kappa_trials(count,[1:frames])=filtkappa;
            count=count+1;
        end
    end
    hold off;
    
    title(['M:' obj{1}.mouseName ' S: ' obj{1}.sessionName ' Ttype: ' str ' Bk: ' block_tags{blk}  ' Kappa'  ]);
%     xt = [1:maxframes]*frameTime;
    maxkappa = cell2mat(cellfun(@(x) x.maxTouchKappaTrial,obj(trialnums),'uniformoutput',false));
    totalkappa = cell2mat(cellfun(@(x) x.totalTouchKappaTrial,obj(trialnums),'uniformoutput',false));
    
    temp = totalkappa;
    nocontact = find(temp==0);
    temp(nocontact) = [];
    subplot(numblocks*2,2,(blk-1)*2+2);
    if(~isempty(temp))
        totalkappa_dist = histnorm(temp,[-30:30]);
        plot([-30:30],totalkappa_dist,'color','k','Linewidth',1.5); xlabel('Kappa'); ylabel('Norm freq');  title('Kappa Dist Cummulative ');
        axis([-30 30 0 .75]);
        text(.5,.5,['Contacts ' num2str(length(totalkappa)-length(nocontact)) '/' num2str(length(totalkappa)) ],'VerticalAlignment','top','HorizontalAlignment','center');
    else
        axis([-30 30 0 .75]);
        text(.5,.2,['Contacts ' num2str(length(totalkappa)-length(nocontact)) '/' num2str(length(totalkappa)) ],'VerticalAlignment','top','HorizontalAlignment','center');

    end
    subplot(numblocks*2,2,(blk-1)*2+3);
    plot(totalkappa,'ko','MarkerFaceColor','k'); xlabel('Trials');ylabel('TotalKappa');   
     subplot(numblocks*2,2,(blk-1)*2+4);
     plot(maxkappa,'ko','MarkerFaceColor','k');  xlabel('Trials');ylabel('MaxKappa');

    
end

% saveas(gcf,[fpath,filesep,fnam],'eps');
print(h2,'-depsc2','-painters','-loose',[fpath,filesep,fnam])
close(h2);

    w_thetaenv.totalTouchKappa{blk}= {horzcat(trialnums,totalkappa')};
    w_thetaenv.maxTouchKappa{blk}= {horzcat(trialnums,maxkappa')};
    w_thetaenv.kappatrials{blk} = {kappa_trials};

%% plot fitted whisker
if(plot_whiskerfits)
    w = waitbar(0,'Plotting fitted whisker');
    h3 = figure('Name','fitted whisker','visible','off');
    set(0,'CurrentFigure',h3);
    
    for(blk=1:numblocks)
        
        trialnums = block_trialnums{blk};
        for(i=1:1:length(trialnums))
            t = trialnums(i);
            % %                 fittedX = obj{t}.polyFitsROI{1}{1};
            % %                 fittedY = obj{t}.polyFitsROI{1}{2};
            % %                 fittedQ = obj{t}.polyFitsROI{1}{3};
            
            fittedX = obj{t}.polyFits{1}{1};
            fittedY = obj{t}.polyFits{1}{2};
            
            frames = [1: length(fittedX)];
            xt =  frames*frameTime;
            frameInds= find(xt >= restrictTime(1) & xt <= restrictTime(2));
            cmap=jet(length(frameInds));
            colormap(cmap);
            nframes = length(frameInds);
            x = cell(1,nframes);
            y = cell(1,nframes);
            
            col=repmat(linspace(0,1,nframes)',1,3);
            col=repmat([1,.1,.1],nframes,1).*col;
            %                 col=col(end:-1:1,:);
            barpos = obj{t}.bar_pos_trial;
            barpos(1,2) = point(1,2);
            for k=1:nframes
                f = frameInds(k);
                px = fittedX(f,:);
                py = fittedY(f,:);
                %                     pq = fittedQ(f,:);
                %                     q = linspace(pq(1),pq(2));
                q=linspace(0,1);
                
                x{k} = polyval(px,q);
                y{k} = polyval(py,q);
                
                plot(x{k},y{k},'color',col(k,:),'linewidth',1.5); axis ([0 520 0 400]);
                hold on;
            end
            
            
            p = (0:0.1:2*pi);
            r = 5;
            for(k=1:size(gopix,1))
                plot(r*sin(p)+gopix(k,1),r*cos(p)+gopix(k,2),'linewidth',2,'color','blue');
                hold on;
            end
            plot(r*sin(p)+barpos(1,1),r*cos(p)+barpos(1,2),'linewidth',6,'color','red');
            plot(r*sin(p)+nogopix(1,1),r*cos(p)+nogopix(1,2),'linewidth',2,'color','black');
            
            filename = ['Mouse:' obj{i}.mouseName ' Session: ' obj{i}.sessionName ' Trialtype: ' str ' Block: ' block_tags{blk} obj{t}.trackerFileName];
            title(gca,filename);
            set(gca,'YDir','reverse');
            hold off;
            %               colorbar('location','EastOutside');
            fnam=['w' obj{t}.trackerFileName(30:33) '.eps'];
%             saveas(gcf,[fpath,filesep,fnam],'eps');
            print(h3,'-depsc2','-painters','-loose',[fpath,filesep,fnam])
            msg=sprintf('Plotting %d of %d',i,length(trialnums));
            waitbar(i/(length(trialnums)+1),w,msg);
            %       set(f,'visible','on');
            
        end
    end
    
    close(w);
end
end

