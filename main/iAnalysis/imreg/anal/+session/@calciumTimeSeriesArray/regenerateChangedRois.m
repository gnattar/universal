%
% SP Apr 2011
%
% This will go to the original data files and reconstruct raw fluorescence for
%  the ROIs that have changed between roiArray and originalRoiArray.
%
% USAGE:
%
%   obj = regenerateChangedRois(obj, rerunBestPracticesDffAndEvdet, saveRoiFile)
%
% PARAMS:
%   rerunBestPracticesDffAndEvdet: 1 (default): will call 
%     runBestPRacticessDffAndEvdet after reloading
%   saveRoiFile: if 1, will rewrite the ROI file ; default 0
%   
function obj = regenerateChangedRois(obj, rerunBestPracticesDffAndEvdet, saveRoiFile)
	if (nargin < 2) ; rerunBestPracticesDffAndEvdet = 1; end
	if (nargin < 3) ; saveRoiFile = 0; end

  % --- loop thru the FOVs
	for f=1:obj.numFOVs
	  processSingleFOV(obj, f);
	end

  % --- class-wide cleanup

	% delete//clear:
	oldTrialTimes = obj.caPeakEventSeriesArray.trialTimes;
	obj.dffTimeSeriesArray = [];
	obj.caPeakEventSeriesArray = [];
	obj.caPeakTimeSeriesArray = [];
	obj.eventBasedDffTimeSeriesArray = [];
	obj.antiRoiDffTS = [];
	obj.activeRoiIds = [];

	% Rerun runBestPracticesDffAndEvdet if called for 
	if (rerunBestPracticesDffAndEvdet)
	  obj.runBestPracticesDffAndEvdet();
		obj.caPeakEventSeriesArray.trialTimes = oldTrialTimes;
	end
			  

%
% processes a single FOV for regeneration
% 
function processSingleFOV(obj, f)

  % --- should we even proceed?

	% are any rois even different?
  [diffRoiIds absentRoiIds] = obj.roiArray{f}.getChangedRoiIds( obj.originalRoiArray{f});
	if (length(diffRoiIds) == 0)
	  disp(['regenerateChangedRois::FOV ' num2str(f) ' no different ROIs; doing nothing.']);
		return;
	end

  % make sure we even have a file list ...
  if (length(obj.fileList{f}) == 0 | min(size(obj.fileFrameIdx{f})) == 0)
	  disp('regenerateChangedRois::must have a valid file list to use this method.');
		return;
	end
	
  % --- process and go for it

	% setup
	nFrames = size(obj.fileFrameIdx{f},2);
  sameRoiIds = setdiff(obj.ids, diffRoiIds);
	for s=1:length(sameRoiIds)
		sameRoiIdxOrig(s) = find(obj.ids == sameRoiIds(s));
		sameRoiIdxNew(s) = find(obj.roiArray{f}.roiIds == sameRoiIds(s));
	end
	diffRoiIdx = setdiff(1:length(obj.roiArray{f}.roiIds), sameRoiIdxNew);

  % build anti-roi idx
	antiRoiIndices =  obj.roiArray{f}.getAntiRoiIndices(2,5);

	% prebuild new fields
	nAntiRoiFluoVec = nan*ones(1,nFrames);
	nValueMatrix = zeros(length(obj.roiArray{f}.rois), nFrames);
	nIds = zeros(1,length(obj.roiArray{f}.rois));
  nIdStrs = {};

	% prepopulate nValueMatrix, nIds, and nIdStrs with unchanged
	for r=1:length(sameRoiIds)
	  nValueMatrix(sameRoiIdxNew(r),:) = obj.valueMatrix(sameRoiIdxOrig(r),:);
		nIds(sameRoiIdxNew(r)) = sameRoiIds(r);
		nIdStrs{sameRoiIdxNew(r)} = obj.idStrs{sameRoiIdxOrig(r)};
	end

	% --- loop thru files; get changed roi vectors, anti roi
	for fl=1:length(obj.fileList)
		% Get file name, frame #s we want ...
		fname = obj.fileList{f}{fl};

		% load image
		disp(['generateCalciumTimeSeriesArray::processing ' fname '...']);
		[im improps] = load_image(fname);
		P = size(im,1)*size(im,2);

		% -- frame loop -- pull only required frames, and into
		%    appropriate place using fileFrameIdx
		ffi = find(obj.fileFrameIdx{f}(1,:) == fl);
		frames = obj.fileFrameIdx{f}(2,ffi);
		for fi=1:length(ffi);
		  i = obj.fileFrameIdx{f}(2,ffi(fi));
			% -- loop thru rois that you need to store
			for r=1:length(diffRoiIds)
				indices = obj.roiArray{f}.rois{diffRoiIdx(r)}.indices;
 
        % place directly into new value matrix
				nValueMatrix(diffRoiIdx(r),ffi(fi)) =  mean(im(indices + (i-1)*P));
			end

			% anti-roi
			nAntiRoiFluoVec(ffi(fi)) = mean(im(antiRoiIndices + (i-1)*P));
		end
  end

	% -- assign ids, idStrs for new guys
	for r=1:length(diffRoiIds)
		nIds(diffRoiIdx(r)) = diffRoiIds(r);
		nIdStrs{diffRoiIdx(r)} = ['Ca TS for ' num2str(diffRoiIds(r))];
	end

  % -- mop up

  % rebuild anti roi
	tmpTS = session.timeSeries(obj.time, 1, nAntiRoiFluoVec, 1, ['dF/F anti-ROI FOV ' num2str(f)], 0, 'Generated by generateCalciumTimeSeriesArray');
	obj.antiRoiFluoTS{f} = tmpTS;

  % assign key vars (insert)
	preIdx = find(obj.roiFOVidx < f);
	postIdx = find(obj.roiFOVidx > f);
	newIds = [obj.ids(preIdx) nIds obj.ids(postIdx)];
	newIdStrs = [obj.idStrs(preIdx) nIdStrs obj.idStrs(postIdx)];
	newValueMatrix = [obj.valueMatrix(preIdx,:) ; nValueMatrix ; obj.valueMatrix(postIdx,:)];
	
	obj.ids = newIds;
	obj.idStrs = newIdStrs;
	obj.valueMatrix = newValueMatrix;

	% save roi file
	if (saveRoiFile)
	  obj.roiArray{f}.saveToFile(obj.roiArray{f}.roiFileName, 1);
	end
