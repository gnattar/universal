%
% SP Sep 2011
%
% This is a par_execute-compliant file with no subfunc and only one parameter -
%  the path of the XML file that contains info needed to run imreg.  IT will
%  run breakup_volume_images, then generate parfiles to do image registration.
%
%  Those parallel jobs need to be run outside of this.  
%
function imreg_par_fromxml(xml_path)

  % --- pull from XML file -- can't use native because stupid Java not in cluster version 
	fid = fopen(xml_path,'r');
	fseek(fid,0,1); file_size = ftell(fid);
	fseek(fid,0,-1) ; file_content = char(fread(fid,file_size))';
	fclose(fid);
 
  % read in file
	tag = {'rawdata_path', 'par_path', 'base_image_fname', 'num_fovs', 'offset', 'image_wildcard'};
	for t=1:length(tag)
	  ts = strfind(file_content,['<' tag{t} '>']) + length(tag{t}) + 2;
	  te = strfind(file_content,['</' tag{t} '>']) - 1;
		text{t} = file_content(ts:te);
	end

	% pull relevant elements
	rdi = find(strcmp(tag, 'rawdata_path'));
	ppi = find(strcmp(tag, 'par_path'));
	bifni = find(strcmp(tag, 'base_image_fname'));
	nfi = find(strcmp(tag, 'num_fovs'));
	oi = find(strcmp(tag, 'offset'));
	iwci = find(strcmp(tag, 'image_wildcard'))

	rawdata_path = text{rdi};
	par_path = text{ppi};
	base_image_fname = text{bifni};
	num_fovs = str2num(text{nfi});
	offset = str2num(text{oi});
	image_wildcard = text{iwci};

	% --- now breakup FOVs
%  breakup_volume_images(rawdata_path, image_wildcard, num_fovs,1,base_image_fname, offset,[],0,57);

	% --- setup image-registration
	source_path = [rawdata_path filesep '%wc{fov_*}'];
	source_wildcard = '*main*tif';
	output_path = ''; % fluo_batch_out is default

	% step 1: register using norm x corr on 5 stillest frames as target
	processor_names{1} = 'imreg';
	pr_params.spmv = 1;
	pr_params.tpmv = 2;
	pr_params.t_img_mode = 1;
	pr_params.t_img_stillest_nframe = 5;
	pr_params.meth =  9;
	processor_params{1} = pr_params;


	% step 2: register using piecewise on 5 stillest frames as target
	processor_names{2} = 'imreg';
	pr_params.spmv = 1;
	pr_params.tpmv = 2;
	pr_params.t_img_mode = 1;
	pr_params.t_img_stillest_nframe = 5;
	pr_params.meth =  1;
	processor_params{2} = pr_params;

	% step 3: postprocess for piecewise imreg
	processor_names{3} = 'imreg_postprocess';
	pr_params.init_mf_size = 20;
	pr_params.adapt_correct_params = [0.9 1 20];
	pr_params.final_mf_size = 20;;
	processor_params{3} = pr_params;

	% step 4: register normxcorr to stillest movie in directory
	processor_names{4} = 'imreg';
	pr_params.spmv = 2;
	pr_params.tpmv = 2;
	pr_params.t_img_mode = 3;
	pr_params.t_img_stillest_nframe = 0;
	pr_params.meth =  9;
	processor_params{4} = pr_params;

	% step 5: summarize & cleanup
	processor_names{5} = 'imreg_session_stats';
	pr_params.zstack_path = [];
	pr_params.source_wildcard = 'Image_Registration_4_*tif';
	pr_params.delete_other_tifs = 1;
	processor_params{5} = pr_params;

	fluo_pargen_nogui(source_path, source_wildcard, output_path, par_path, ...
										processor_names, processor_params, 1);


