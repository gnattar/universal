%
% SP Mar 2011
%
% Wrapper script for generating tree bagger execution on cluster
%
% Define treeBaggerParams here.  
%
%
function tree_matgen
	% pull IP & assign machine dependent parameters
	[irr ipstr] = system('ifconfig | grep ''inet addr:'' | grep -v ''127.0.0.1'' | cut -d: -f2 | awk ''{print $1}''');
	if (strcmp(strtrim(ipstr),'10.102.10.187')) % local box
		baseOutDir = '/data/an107028/tree/';
		sessDataPath = '/data/an107028/session2';
	else % assume cluster
		baseOutDir = '/groups/svoboda/wdbp/perons/tree/par/';
		sessDataPath = '/groups/svoboda/wdbp/perons/tree/data/sp/an94953';
	end

	% 38596:
	sessFilesX = { ...
	'an38596_2010_02_03_sess', ... 
	'an38596_2010_02_08_sess', ... 
	'an38596_2010_03_02_sess', ... 
	'an38596_2010_02_05_sess', ... 
	'an38596_2010_02_09_sess', ... 
	'an38596_2010_02_16_sess', ... 
	'an38596_2010_02_17_sess', ... 
	'an38596_2010_02_19_sess', ... 
	'an38596_2010_02_23_sess', ... 
	'an38596_2010_03_01_sess', ... 
  'an38596_2010_02_02_sess', ... 
  'an38596_2010_03_03_sess', ...
	'an38596_2010_02_04_sess', ... 
  'an38596_2010_02_11_sess', ... 
  'an38596_2010_02_15_sess', ... 
  'an38596_2010_02_18_sess', ... 
  'an38596_2010_02_20_sess', ... 
  'an38596_2010_02_22_sess', ... 
  'an38596_2010_02_25_sess', ... 
	};
	% 107028:
	sessFilesX = { ...
  'an107028_2010_08_03_sess', ...
  'an107028_2010_08_04_sess', ...
  'an107028_2010_08_05_sess', ...
  'an107028_2010_08_09_sess', ...
  'an107028_2010_08_10_sess', ...
  'an107028_2010_08_11_sess', ...
  'an107028_2010_08_12_sess', ...
  'an107028_2010_08_13_sess', ...
  'an107028_2010_08_16_sess', ...
  'an107028_2010_08_17_sess', ...
  'an107028_2010_08_18_sess', ...
  'an107028_2010_08_19_sess', ...
  'an107028_2010_08_20_sess', ...
  'an107028_2010_08_21_sess', ...
  'an107028_2010_08_22_sess', ...
  'an107028_2010_08_25_sess', ...
  'an107028_2010_08_26_sess', ...
  'an107028_2010_08_27_sess', ...
	};
	% 107029:
	sessFilesX = { ...
  'an107029_2010_08_02_sess', ...
  'an107029_2010_08_03_sess', ...
  'an107029_2010_08_04_sess', ...
  'an107029_2010_08_05_sess', ...
  'an107029_2010_08_06_sess', ...
  'an107029_2010_08_09_sess', ...
  'an107029_2010_08_10_sess', ...
  'an107029_2010_08_11_sess', ...
  'an107029_2010_08_12_sess', ...
  'an107029_2010_08_16_sess', ...
  'an107029_2010_08_17_sess', ...
  'an107029_2010_08_18_sess', ...
  'an107029_2010_08_19_sess', ...
  'an107029_2010_08_20_sess', ...
  'an107029_2010_08_21_sess', ...
  'an107029_2010_08_22_sess', ...
  'an107029_2010_08_25_sess', ...
  'an107029_2010_08_26_sess', ...
  'an107029_2010_08_27_sess', ...
	};
	% 94953:
%    'an94953_2010_03_31_sess', ...
%    'an94953_2010_04_01_sess', ...
%    'an94953_2010_04_02_sess', ...
%    'an94953_2010_04_05_sess', ...
%    'an94953_2010_04_06_sess', ...
%    'an94953_2010_04_07_sess', ...
%    'an94953_2010_04_08_sess', ...
%    'an94953_2010_04_09_sess', ...
%    'an94953_2010_04_12_sess', ...
%    'an94953_2010_04_13_sess', ...
%    'an94953_2010_04_14b_sess', ...
%    'an94953_2010_04_14_sess', ...
%    'an94953_2010_04_15b_sess', ...
%    'an94953_2010_04_15_sess', ...
%    'an94953_2010_04_16b_sess', ...
%    'an94953_2010_04_16_sess', ...
%    'an94953_2010_04_19b_sess', ...
%    'an94953_2010_04_19_sess', ...
%    'an94953_2010_04_20b_sess', ...
%    'an94953_2010_04_20_sess', ...
%    'an94953_2010_04_21b_sess', ...
%    'an94953_2010_04_21_sess', ...
%???    'an94953_2010_04_22b_sess', ...
%    'an94953_2010_04_22_sess', ...
%???    'an94953_2010_04_23b_sess', ...
	sessFiles = { ...
    'an94953_2010_04_23_sess', ...
    'an94953_2010_04_26_sess', ...
    'an94953_2010_04_27_sess', ...
    'an94953_2010_04_30_sess', ...
	};
	dffModes = [1 1 1]; % set to 1 to turn on a mode; mode 1: regular dF/F ; 2: vogelstein event-based "dF/F"

	% treeBaggerParams setup -- if you want to make a different one for each session, 
	%  do so manually ...
	treeBaggerParams.sensoryShift = 1:2;
	treeBaggerParams.motorShift = -2:-1;
%	treeBaggerParams.excludeStimulusFeaturesWC = {'pro touch', 'ret touch'};
	treeBaggerParams.outputFileTag = '';

	cd(sessDataPath); % guarantee that you can load everything no problem

	for f=1:length(sessFiles);
		di = 1;
    % make output directory
		mkdir([baseOutDir filesep sessFiles{f}]);
		subBaseOutDir = [baseOutDir filesep sessFiles{f}];

    % load
		load([sessDataPath filesep sessFiles{f}]);
		treeBaggerParams.optionsTree = getDefaultOptionsTreeSimon(s.mouseId);

    % ---- "modes"
		% encoder
		treeBaggerParams.runModes = [1 0 0 0 0 0 0];
    di = singleCall (dffModes, s, treeBaggerParams, di, subBaseOutDir);

		% encoder group
		treeBaggerParams.runModes = [0 1 0 0 0 0 0];
    di = singleCall (dffModes, s, treeBaggerParams, di, subBaseOutDir);

		% encoder cat
		treeBaggerParams.runModes = [0 0 1 0 0 0 0];
    di = singleCall (dffModes, s, treeBaggerParams, di, subBaseOutDir);

		% decoder multicell
		treeBaggerParams.runModes = [0 0 0 1 0 1 0];
    di = singleCall (dffModes, s, treeBaggerParams, di, subBaseOutDir);

		% decoder 1 cell
		treeBaggerParams.runModes = [0 0 0 0 1 0 1];
    di = singleCall (dffModes, s, treeBaggerParams, di, subBaseOutDir);
	end

function di = singleCall (dffModes, s, treeBaggerParams, di, subBaseOutDir)
	poleTimeDerivedDataTSA =  s.derivedDataTSA.getTrialTimeRestrictedTSA(s.trialStartTimes, s.trialIds, [0 2.5]);

	if (dffModes(1))
		% regular ca -- ALL rois
		treeBaggerParams.outputFileTag = 'allTime_rawDff_';
		s.setupTreeBaggerPar([subBaseOutDir filesep num2str(di)],treeBaggerParams);
		di = di+1;

		% restricted to pole time ..
		treeBaggerParams.outputFileTag = 'poleTime_rawDff_';
		cellResponseTSA =  s.caTSA.dffTimeSeriesArray.getTrialTimeRestrictedTSA(s.trialStartTimes, s.trialIds, [0 2.5]);
		s.setupTreeBaggerPar([subBaseOutDir filesep num2str(di)],treeBaggerParams, cellResponseTSA, poleTimeDerivedDataTSA);
		di = di+1;
	end

	if (dffModes(2))
		% run bagger with vogelstein based data -- ONLY on cells w/ events(!)
		treeBaggerParams.outputFileTag = 'allTime_eventDff_';
		treeBaggerParams.roiID = s.caTSA.ids(find(sum(s.caTSA.eventBasedDffTimeSeriesArray.valueMatrix') > 0)); % active cells
		s.setupTreeBaggerPar([subBaseOutDir filesep num2str(di)],treeBaggerParams, s.caTSA.eventBasedDffTimeSeriesArray);
		di = di+1;

		% restricted to pole time ..
		treeBaggerParams.outputFileTag = 'poleTime_eventDff_';
		cellResponseTSA =  s.caTSA.eventBasedDffTimeSeriesArray.getTrialTimeRestrictedTSA(s.trialStartTimes, s.trialIds, [0 2.5]);
		s.setupTreeBaggerPar([subBaseOutDir filesep num2str(di)],treeBaggerParams, cellResponseTSA, poleTimeDerivedDataTSA);
		di = di+1;
	end

	if (dffModes(3))
		% run bagger with vogelstein based data, peaks only -- AGAIN , only cells w/ events
		treeBaggerParams.outputFileTag = 'allTime_eventPeakDff_';
		treeBaggerParams.roiID = s.caTSA.ids(find(sum(s.caTSA.eventBasedDffTimeSeriesArray.valueMatrix') > 0)); % active cells
		if (isempty(s.caTSA.caPeakTimeSeriesArray))
			s.caTSA.caPeakTimeSeriesArray = s.caTSA.caPeakEventSeriesArray.deriveTimeSeriesArray(s.caTSA.time, s.caTSA.timeUnit, s.caTSA.trialIndices);
		end
		s.setupTreeBaggerPar([subBaseOutDir filesep num2str(di)],treeBaggerParams, s.caTSA.caPeakTimeSeriesArray);
		di = di+1;

		% restricted to pole time ..
		treeBaggerParams.outputFileTag = 'poleTime_eventPeakDff_';
		cellResponseTSA =  s.caTSA.caPeakTimeSeriesArray.getTrialTimeRestrictedTSA(s.trialStartTimes, s.trialIds, [0 2.5]);
		s.setupTreeBaggerPar([subBaseOutDir filesep num2str(di)],treeBaggerParams, cellResponseTSA, poleTimeDerivedDataTSA);
		di = di+1;
	end




